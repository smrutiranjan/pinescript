
//@version=5
indicator("MyPivot", "My Pivots", overlay=true, max_lines_count=500, max_labels_count=500)

// Get the open price of the current day
current_day_open = request.security(syminfo.tickerid, "D", open)

//pivotTypeInput = input.string(title="Type", defval="Traditional", options=["Traditional", "Fibonacci", "Woodie", "Classic", "DM", "Camarilla"])
pivotTypeInput = "Fibonacci"
//pivotAnchorInput = input.string(title="Pivots Timeframe", defval="Auto", options=["Auto", "Daily", "Weekly", "Monthly", "Quarterly", "Yearly", "Biyearly", "Triyearly", "Quinquennially", "Decennially"])
pivotAnchorInput = "Daily"
//maxHistoricalPivotsInput = input.int(title="Number of Pivots Back", defval=15, minval=1, maxval=200, display = display.data_window)
maxHistoricalPivotsInput = 2
//isDailyBasedInput = input.bool(title="Use Daily-based Values", defval=true, display = display.data_window, tooltip="When this option is unchecked, Pivot Points will use intraday data while calculating on intraday charts. If Extended Hours are displayed on the chart, they will be taken into account during the pivot level calculation. If intraday OHLC values are different from daily-based values (normal for stocks), the pivot levels will also differ.")
isDailyBasedInput=true
//showLabelsInput = input.bool(title="Show Labels", defval=true, group="labels", display = display.data_window)
//showPricesInput = input.bool(title="Show Prices", defval=true, group="labels", display = display.data_window)
showPricesInput=false
showLabelsInput =true
//positionLabelsInput = input.string("Left", "Labels Position", options=["Left", "Right"], group="labels", display = display.data_window)
positionLabelsInput="Left"
//linewidthInput = input.int(title="Line Width", defval=1, minval=1, maxval=100, group="levels", display = display.data_window)
linewidthInput =1
DEFAULT_COLOR = #FB8C00
pColorInput = input.color(#000000, "P‏  ‏  ‏", inline="P", group="levels", display = display.data_window)
pShowInput = input.bool(true, "", inline="P", group="levels", display = display.data_window)

s1ColorInput = input.color(#008000, "S1", inline="S1/R1" , group="levels", display = display.data_window)
s1ShowInput = input.bool(true, "", inline="S1/R1", group="levels", display = display.data_window)
r1ColorInput = input.color(#FF0000, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R1", inline="S1/R1", group="levels", display = display.data_window)
r1ShowInput = input.bool(true, "", inline="S1/R1", group="levels", display = display.data_window)
s2ColorInput = input.color(#008000, "S2", inline="S2/R2", group="levels", display = display.data_window)
s2ShowInput = input.bool(false, "", inline="S2/R2", group="levels", display = display.data_window)
r2ColorInput = input.color(#FF0000, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R2", inline="S2/R2", group="levels", display = display.data_window)
r2ShowInput = input.bool(false, "", inline="S2/R2", group="levels", tooltip = "Not applicable to DM", display = display.data_window)
s3ColorInput = input.color(#008000, "S3", inline="S3/R3", group="levels", display = display.data_window)
s3ShowInput = input.bool(false, "", inline="S3/R3", group="levels", display = display.data_window)
r3ColorInput = input.color(#FF0000, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R3", inline="S3/R3", group="levels", display = display.data_window)
r3ShowInput = input.bool(false, "", inline="S3/R3", group="levels", tooltip = "Not applicable to DM", display = display.data_window)
s4ColorInput = input.color(#008000, "S4", inline="S4/R4", group="levels", display = display.data_window)
s4ShowInput = input.bool(false, "", inline="S4/R4", group="levels", display = display.data_window)
r4ColorInput = input.color(#FF0000, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R4", inline="S4/R4", group="levels", display = display.data_window)
r4ShowInput = input.bool(false, "", inline="S4/R4", group="levels", tooltip = "Not applicable to: Fibonacci, DM", display = display.data_window)
s5ColorInput = input.color(#008000, "S5", inline="S5/R5", group="levels", display = display.data_window)
s5ShowInput = input.bool(false, "", inline="S5/R5", group="levels", display = display.data_window)
r5ColorInput = input.color(#FF0000, "‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏R5", inline="S5/R5", group="levels", display = display.data_window)
r5ShowInput = input.bool(false, "", inline="S5/R5", group="levels", tooltip = "Not applicable to: Fibonacci, Woodie, Classic, DM", display = display.data_window)

type graphicSettings
    string levelName
    color levelColor
    bool showLevel

var graphicSettingsArray = array.from(
      graphicSettings.new(" P", pColorInput, pShowInput),
      graphicSettings.new("R1", r1ColorInput, r1ShowInput), graphicSettings.new("S1", s1ColorInput, s1ShowInput),
      graphicSettings.new("R2", r2ColorInput, r2ShowInput), graphicSettings.new("S2", s2ColorInput, s2ShowInput),
      graphicSettings.new("R3", r3ColorInput, r3ShowInput), graphicSettings.new("S3", s3ColorInput, s3ShowInput),
      graphicSettings.new("R4", r4ColorInput, r4ShowInput), graphicSettings.new("S4", s4ColorInput, s4ShowInput),
      graphicSettings.new("R5", r5ColorInput, r5ShowInput), graphicSettings.new("S5", s5ColorInput, s5ShowInput))

autoAnchor = switch
    timeframe.isintraday => timeframe.multiplier <= 15 ? "1D" : "1W"
    timeframe.isdaily    => "1M"
    => "12M"

pivotTimeframe = switch pivotAnchorInput
    "Auto"      => autoAnchor
    "Daily"     => "1D"
    "Weekly"    => "1W"
    "Monthly"   => "1M"
    "Quarterly" => "3M"
    => "12M"

//@variable The number of years in the selected Pivot period
pivotYearMultiplier = switch pivotAnchorInput
    "Biyearly"       => 2
    "Triyearly"      => 3
    "Quinquennially" => 5
    "Decennially"    => 10
    => 1

//@variable The number of values in the pivots of the selected type
numOfPivotLevels = switch pivotTypeInput
    "Traditional" => 11
    "Camarilla"   => 11
    "Woodie"      => 9
    "Classic"     => 9
    "Fibonacci"   => 7
    "DM"          => 3

type pivotGraphic
    line pivotLine
    label pivotLabel

method delete(pivotGraphic graphic) =>
    graphic.pivotLine.delete()
    graphic.pivotLabel.delete()

var drawnGraphics = matrix.new<pivotGraphic>()

localPivotTimeframeChange = timeframe.change(pivotTimeframe) and year % pivotYearMultiplier == 0
securityPivotTimeframeChange = timeframe.change(timeframe.period) and year % pivotYearMultiplier == 0

pivotTimeframeChangeCounter(condition) => 
    var count = 0
    if condition and bar_index > 0
        count += 1
    count

localPivots = ta.pivot_point_levels(pivotTypeInput, localPivotTimeframeChange)
securityPivotPointsArray = ta.pivot_point_levels(pivotTypeInput, securityPivotTimeframeChange)

securityTimeframe = timeframe.isintraday ? "1D" : timeframe.period
[securityPivots, securityPivotCounter] = request.security(syminfo.tickerid, pivotTimeframe, [securityPivotPointsArray, pivotTimeframeChangeCounter(securityPivotTimeframeChange)], lookahead = barmerge.lookahead_on)
pivotPointsArray = isDailyBasedInput ? securityPivots : localPivots

//@function Sets the ending points of the currently active pivots to `endTime`.
affixOldPivots(endTime) =>
    if drawnGraphics.rows() > 0
        lastGraphics = drawnGraphics.row(drawnGraphics.rows() - 1)

        for graphic in lastGraphics
            graphic.pivotLine.set_x2(endTime)
            if positionLabelsInput == "Right"
                graphic.pivotLabel.set_x(endTime)

//@function Draws pivot lines and labels from `startTime` to the approximate end of the period.
drawNewPivots(startTime) =>
    
    newGraphics = array.new<pivotGraphic>()

    for [index, coord] in pivotPointsArray
        levelSettings = graphicSettingsArray.get(index)
        if not na(coord) and levelSettings.showLevel
            lineEndTime = startTime + timeframe.in_seconds(pivotTimeframe) * 1000 * pivotYearMultiplier
            pivotLine = line.new(startTime, coord, lineEndTime, coord, xloc = xloc.bar_time, color=levelSettings.levelColor, width=linewidthInput)
            pivotLabel = label.new(x = positionLabelsInput == "Left" ? startTime : lineEndTime,
                               y = coord,
                               text = (showLabelsInput ? levelSettings.levelName + " " : "") + (showPricesInput ? "(" + str.tostring(coord, format.mintick) + ")" : ""),
                               style = positionLabelsInput == "Left" ? label.style_label_right : label.style_label_left,
                               textcolor = levelSettings.levelColor,
                               color = #00000000,
                               xloc=xloc.bar_time)
            
            newGraphics.push(pivotGraphic.new(pivotLine, pivotLabel))
    
    drawnGraphics.add_row(array_id = newGraphics)

    if drawnGraphics.rows() > maxHistoricalPivotsInput
        oldGraphics = drawnGraphics.remove_row(0)
        
        for graphic in oldGraphics
            graphic.delete()


localPivotDrawConditionStatic = not isDailyBasedInput and localPivotTimeframeChange
securityPivotDrawConditionStatic = isDailyBasedInput and securityPivotCounter != securityPivotCounter[1]

var isMultiYearly = array.from("Biyearly", "Triyearly", "Quinquennially", "Decennially").includes(pivotAnchorInput)
localPivotDrawConditionDeveloping = not isDailyBasedInput and time_close == time_close(pivotTimeframe) and not isMultiYearly 
securityPivotDrawConditionDeveloping = false

if (securityPivotDrawConditionStatic or localPivotDrawConditionStatic)
    affixOldPivots(time)
    drawNewPivots(time)

// If possible, draw pivots from the beginning of the chart if none were found
var FIRST_BAR_TIME = time
if (barstate.islastconfirmedhistory and drawnGraphics.columns() == 0)

    if not na(securityPivots) and securityPivotCounter > 0
        if isDailyBasedInput
            drawNewPivots(FIRST_BAR_TIME)
        else 
            runtime.error("Not enough intraday data to calculate Pivot Points. Lower the Pivots Timeframe or turn on the 'Use Daily-based Values' option in the indicator settings.")
    else
        runtime.error("Not enough data to calculate Pivot Points. Lower the Pivots Timeframe in the indicator settings.")

ema200 = ta.ema(close, 200)
ema100 = ta.ema(close, 100)
ema50 = ta.ema(close, 50) 
ema20 = ta.ema(close, 20)
plot(ema200, color=color.green, title="200 EMA") 
plot(ema100, color=color.yellow, title="100 EMA") 
plot(ema20, color=color.purple, title="20 EMA") 
plot(ema50, color=color.black, title="50 EMA") 

crossoverb=ta.crossover(ema20,ema200 )
downb=ta.crossunder(ema20,ema200)

plotshape(crossoverb,  title = "XX",  text = 'XX',  style = shape.labelup,   location = location.belowbar, color= color.rgb(54, 0, 230), textcolor = color.white, size = size.tiny)
plotshape(downb, title = "XXX", text = 'XXX', style = shape.labeldown, location = location.abovebar, color= color.red,   textcolor = color.white, size = size.tiny)


disp_pdhl = input.bool(true, title='Show PDH & PDL ?', tooltip='Previous Day High and Low')
previousdayHcolor = input(defval=color.black, title='Select Previous Day High Color')
previousdayLcolor = input(defval=color.black, title='Select Previous Day Low Color')
previousdaylinestyle = input.string(defval=line.style_dashed, title='Select PDH/PDL Line Style', options=['dsh', 'sol', 'dot'], tooltip='Dashed, Solid, Dotted')
pdhllinewidth = input.int(defval=1, title='Select PDH/PDL Line Thickness', options=[1, 2, 3, 4, 5])

disp_pdc = input.bool(false, title='Show PDC ?', tooltip='Previous Day Closing')
previousdayCcolor = input(defval=color.black, title='Select Previous Day Close Color')
previousdayClinestyle = input.string(defval=line.style_dashed, title='Select PDC Line Style', options=['dsh', 'sol', 'dot'], tooltip='Dashed, Solid, Dotted')
pdclinewidth = input.int(defval=1, title='Select PDC Line Thickness', options=[1, 2, 3, 4, 5])

disp_dailyHL = input(false, title='Show Current Day High/Low ?')
dailyHighcolor = input(defval=color.red, title='Select High Color')
dailyLowcolor = input(defval=color.green, title='Select Low Color')
dailyHLlinethickness = input.int(defval=1, title='Select High/Low Line Thickness', options=[1, 2, 3, 4, 5])
dailyHLlinestyle = input.string(defval=line.style_solid, title='Select High/Low Line Style', options=['dsh', 'sol', 'dot'], tooltip='dashed, solid, dotted')

disp_fib = input.bool(false, title='Show Intraday Fibs ?', tooltip='Intraday Fibonacci, Current Day High and Low')
fibcolor = input(defval=color.black, title='Select FIB Color')
fiblinestyle = input.string(defval=line.style_solid, title='Select FIB Line Style', options=['dsh', 'sol', 'dot'])
fiblinethickness = input.int(defval=1, title='Select Fib Line Thickness', options=[1, 2, 3, 4, 5])
fib1 = input(0.382, title='Fib Level 1')
fib2 = input(0.618, title='Fib Level 2')
disp_fib3 = input(true, title='Show Fib Level 3 ?')
fib3 = input(0.5, title='Fib Level 3')

disp_pivot = input.bool(false, title='Show Central Pivot ?', tooltip='Show Central Pivot Range')
cprcolor = input(defval=color.blue, title='Select CPR Color')
cprlinestyle = input.string(defval=line.style_dotted, title='Select CPR Line Style', options=['dsh', 'sol', 'dot'])
cprlinethickness = input.int(defval=1, title='Select CPR Line Thickness', options=[1, 2, 3, 4, 5])
 
disp_historicalpivot = input(title='Show Historical Daily Pivots ?', defval=true)
 
firstbar(resolution) =>
    ch = 0
    if resolution == 'Y'
        t = year(time('D'))
        ch := ta.change(t) != 0 ? 1 : 0
        ch
    else
        t = time(resolution)
        ch := ta.change(t) != 0 ? 1 : 0
        ch
    ch

pp_res = 'D'
bars_sinse = 0
bars_sinse := firstbar(pp_res) ? 0 : bars_sinse[1] + 1

// label location shift
chper = time - time[1]
chper := ta.change(chper) > 0 ? chper[1] : chper
xlocation = time + chper * 30
// label location shift ends


phigh_d = request.security(syminfo.tickerid, 'D', high[1], barmerge.gaps_off, barmerge.lookahead_on)
plow_d = request.security(syminfo.tickerid, 'D', low[1], barmerge.gaps_off, barmerge.lookahead_on)
pclose_d = request.security(syminfo.tickerid, 'D', close[1], barmerge.gaps_off, barmerge.lookahead_on)

y_th = line.new(bar_index[math.min(bars_sinse, 5)], disp_pdhl ? phigh_d : na, bar_index, disp_pdhl ? phigh_d : na, color=previousdayHcolor, style=previousdaylinestyle, width=pdhllinewidth, extend=extend.right)
y_to = line.new(bar_index[math.min(bars_sinse, 5)], disp_pdc ? pclose_d : na, bar_index, disp_pdc ? pclose_d : na, color=previousdayCcolor, style=previousdayClinestyle, width=pdclinewidth, extend=extend.right)
y_tl = line.new(bar_index[math.min(bars_sinse, 5)], disp_pdhl ? plow_d : na, bar_index, disp_pdhl ? plow_d : na, color=previousdayLcolor, style=previousdaylinestyle, width=pdhllinewidth, extend=extend.right)

line.delete(y_th[1])
line.delete(y_to[1])
line.delete(y_tl[1])

label_yh = label.new(x=xlocation, y=disp_pdhl ? phigh_d : na, text='PDH', style=label.style_none, xloc=xloc.bar_time, yloc=yloc.price)
label_yc = label.new(x=xlocation, y=disp_pdc ? pclose_d : na, text='PDC', style=label.style_none, xloc=xloc.bar_time, yloc=yloc.price)
label_yl = label.new(x=xlocation, y=disp_pdhl ? plow_d : na, text='PDL', style=label.style_none, xloc=xloc.bar_time, yloc=yloc.price)


label.delete(label_yh[1])
label.delete(label_yc[1])
label.delete(label_yl[1])

// Get previous day's high
prevHigh = phigh_d

// Check if it's the first 5-minute candle of the day
isFirstCandle = hour == 9 and minute < 20

// Condition for sale signal when open is equal to previou day high with below 20 200 ema
openSaleSignal = isFirstCandle and open >= prevHigh  and close < ema20 and close < ema200

// Plotting signals on the chart
plotshape(openSaleSignal,title = "Sale",  text = 'Sale', style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small)

// Condition for buy signal 1st 5min candle is open above previous day low with 20,200 ema above
openBuySignal = isFirstCandle and open >= plow_d and close > ema20 and close > ema200

// Plotting signals on the chart
plotshape(openBuySignal, title = "Buy",  text = 'Buy', style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)

th_d = request.security(syminfo.tickerid, 'D', high, barmerge.gaps_off, barmerge.lookahead_on)
tl_d = request.security(syminfo.tickerid, 'D', low, barmerge.gaps_off, barmerge.lookahead_on)
tc_d = request.security(syminfo.tickerid, 'D', close, barmerge.gaps_off, barmerge.lookahead_on)


line_th_d = line.new(bar_index[math.max(bars_sinse, 1)], disp_dailyHL ? th_d : na, bar_index, disp_dailyHL ? th_d : na, color=dailyHighcolor, style=dailyHLlinestyle, width=dailyHLlinethickness, extend=extend.right)
line.delete(line_th_d[1])
label_th_d = label.new(xlocation, y=disp_dailyHL ? th_d : na, text='DH', color=color.lime, textcolor=color.black, style=label.style_label_down, xloc=xloc.bar_time, yloc=yloc.price)
label.delete(label_th_d[1])

line_tl_d = line.new(bar_index[math.max(bars_sinse, 1)], disp_dailyHL ? tl_d : na, bar_index, disp_dailyHL ? tl_d : na, color=dailyLowcolor, style=dailyHLlinestyle, width=dailyHLlinethickness, extend=extend.right)
line.delete(line_tl_d[1])
label_tl_d = label.new(x=xlocation, y=disp_dailyHL ? tl_d : na, text='DL', color=color.lime, textcolor=color.black, style=label.style_label_up, xloc=xloc.bar_time, yloc=yloc.price)

label.delete(label_tl_d[1])


//intraday fibs

range_1 = th_d - tl_d

lowfib = range_1 * fib1 + tl_d
highfib = range_1 * fib2 + tl_d
fib05 = range_1 * fib3 + tl_d

lowfibline = line.new(bar_index[math.max(bars_sinse, 1)], disp_fib ? lowfib : na, bar_index, disp_fib ? lowfib : na, color=fibcolor, style=fiblinestyle, width=fiblinethickness, extend=extend.right)
line.delete(lowfibline[1])

highfibline = line.new(bar_index[math.max(bars_sinse, 1)], disp_fib ? highfib : na, bar_index, disp_fib ? highfib : na, color=fibcolor, style=fiblinestyle, width=fiblinethickness, extend=extend.right)
line.delete(highfibline[1])

fib05line = line.new(bar_index[math.max(bars_sinse, 1)], disp_fib and disp_fib3 ? fib05 : na, bar_index, disp_fib and disp_fib3 ? fib05 : na, color=fibcolor, style=fiblinestyle, width=fiblinethickness, extend=extend.right)
line.delete(fib05line[1])


// Pivot Range
P = (phigh_d + plow_d + pclose_d) / 3
BC = (phigh_d + plow_d) / 2
TC = P - BC + P

//narrowcpr=( ( th_d+ tl_d ) / 2 ) < ( ( ( th_d+ tl_d + tc_d ) / 3 ) - ( ( ( th_d+ tl_d + tc_d ) / 3 ) * .001 ) )   
narrowcpr=((((( th_d+ tl_d + tc_d ) / 3) - (( th_d+ tl_d ) / 2 )+( th_d+ tl_d + tc_d ) / 3) - (( th_d+ tl_d ) / 2 ))) < ( ( th_d+ tl_d + tc_d ) / 3 )*0.001   

[diplus, diminus, adx] = ta.dmi(14, 20)
isStrongTrend="Adx < 25"
above200="Close < 200E"
above100="Close < 100E"
above50="Close < 50E"
above20="Close < 20E"

narrowcprstr="Not Trading"

// Function to calculate CPR levels
cpr(h, l, c) =>
    pp = (h + l + c) / 3  // Pivot Point
    bc = (h + l) / 2       // Bottom Central
    tc = pp - bc + pp      // Top Central
    [pp, bc, tc]

// Get previous day CPR levels
[prev_pp, prev_bc, prev_tc] = request.security(syminfo.tickerid, "D", cpr(high[1], low[1], close[1]))

// Get current day CPR levels
[pp, bc, tc] = cpr(high, low, close)

cprstr='sidewiseP'

if (prev_pp < pp)
    cprstr :="upsideP P->R,S1->P"

if (prev_pp > pp)
    cprstr :="downsideP P->S1,R1->P"

if (narrowcpr)
    narrowcprstr :="Trending Day"

if (adx > 25)
    isStrongTrend := "Adx > 25"

if (close > ema200)
    above200 := "Close > 200E"

if (close > ema100)
    above100 := "Close > 100E"

if (close > ema50)
    above50 := "Close > 50E"

if (close > ema20)
    above20 := "Close > 20E"

// Get weekly open and close prices
weekly_open = request.security(syminfo.tickerid, "W", open)
weekly_close = request.security(syminfo.tickerid, "W", close)

// Get previous week's open and close prices
prev_weekly_open = request.security(syminfo.tickerid, "W", open[1])
prev_weekly_close = request.security(syminfo.tickerid, "W", close[1])

// Determine if current week's candle is green or red
isweek=""
if (weekly_close > weekly_open)
    isweek :="Green Week"
if (weekly_close < weekly_open)
    isweek :="Red Week"

// Determine if current week's candle is above or below previous week's candle
isweekaboveorbelow=""
if (weekly_close > prev_weekly_close)
    isweekaboveorbelow :="Above Prv Week"
if (weekly_close < prev_weekly_close)
    isweekaboveorbelow :="Below Prv Week"

enablwin = input.bool(true, title='Enable Window', tooltip='Enable Info Window')
 
// Calculate the length of the first 5-minute candle
var float firstCandleLength = na
if (ta.change(time("D")) != 0)
    firstCandleLength := high - low

// Previous day's close
prevClose = request.security(syminfo.tickerid, "D", close[1], lookahead=barmerge.lookahead_on)

// High of the first 5-minute candle
first5minHigh = request.security(syminfo.tickerid, "5", high[1], lookahead=barmerge.lookahead_on)

// Calculate the difference
diff = first5minHigh - prevClose

// On the chart's last bar, make a label and set its text
if (barstate.islastconfirmedhistory and enablwin)
//if (barstate.islast and enablwin)
    // Create a label three bars to the right. It appears in black &
    // white and points to the left.
    myLabel = label.new(x=bar_index+10, y=close,color=color.navy,
	     textcolor=color.yellow, style=label.style_label_left, 
         size=size.normal) 
    // Update the label's text to include the current close price
    label.set_text(id=myLabel, text=str.tostring(cprstr)+"\n"+str.tostring(narrowcprstr)+"\n"+str.tostring(isStrongTrend)+"\n"+str.tostring(above200)+"\n"+str.tostring(above100)+"\n"+str.tostring(above50)+"\n"+str.tostring(above20)+"\n"+str.tostring(isweek)+"\n"+str.tostring(isweekaboveorbelow)+"\nOpen="+str.tostring(current_day_open)+"\n1st5min="+str.tostring(firstCandleLength)+"\ndiff="+str.tostring(diff))
    //label.set_text(id=myLabel, text=str.tostring(narrowcprstr)+"\n"+str.tostring(isStrongTrend))
line_p_d = line.new(bar_index[math.max(bars_sinse, 1)], disp_pivot ? TC : na, bar_index, disp_pivot ? TC : na, color=cprcolor, style=cprlinestyle, width=cprlinethickness, extend=extend.right)
line_TC_d = line.new(bar_index[math.max(bars_sinse, 1)], disp_pivot ? P : na, bar_index, disp_pivot ? P : na, color=cprcolor, style=cprlinestyle, width=cprlinethickness, extend=extend.right)
line_BC_d = line.new(bar_index[math.max(bars_sinse, 1)], disp_pivot ? BC : na, bar_index, disp_pivot ? BC : na, color=cprcolor, style=cprlinestyle, width=cprlinethickness, extend=extend.right)
line.delete(line_p_d[1])
line.delete(line_TC_d[1])
line.delete(line_BC_d[1])
//show daily historical pivots
plot(disp_historicalpivot ? P : na, title='Historical Pivot', linewidth=1, color=color.new(color.blue, 0), style=plot.style_circles)
plot(disp_historicalpivot ? TC : na, title='Historical TC', linewidth=1, color=color.new(color.blue, 0), style=plot.style_circles)
plot(disp_historicalpivot ? BC : na, title='Historical BC', linewidth=1, color=color.new(color.blue, 0), style=plot.style_circles) 

barsback = input(7, title='Bars back to check for a swing')
showsig = input(false, title='Show Signal Markers')

swing_detection(index) =>
    swing_high = false
    swing_low = false
    start = index * 2 - 1  // -1 so we have an even number of
    swing_point_high = high[index]
    swing_point_low = low[index]

    //Swing Highs
    for i = 0 to start by 1
        swing_high := true
        if i < index
            if high[i] > swing_point_high
                swing_high := false
                break
        // Have to do checks before pivot and after seperately because we can get
        // two highs of the same value in a row. Notice the > and >= difference
        if i > index
            if high[i] >= swing_point_high
                swing_high := false
                break

    //Swing lows
    for i = 0 to start by 1
        swing_low := true
        if i < index
            if low[i] < swing_point_low
                swing_low := false
                break
        // Have to do checks before pivot and after seperately because we can get
        // two lows of the same value in a row. Notice the > and >= difference
        if i > index
            if low[i] <= swing_point_low
                swing_low := false
                break

    [swing_high, swing_low]

// Check for a swing
[swing_high, swing_low] = swing_detection(barsback)

// RSI settings
rsiLength = 14
rsiSource = close
rsi = ta.rsi(rsiSource, rsiLength)

// RSI thresholds
rsiBuyLevel = 60
rsiSellLevel = 40
// Buy signal: RSI crosses above 60
buySignal = ta.crossover(rsi, rsiBuyLevel)

// Sell signal: RSI crosses below 40
sellSignal = ta.crossunder(rsi, rsiSellLevel)
// Plotting
plotshape(swing_high, style=shape.arrowdown, location=location.abovebar, color=color.new(color.red, 0), text='SH', offset=-barsback)
plotshape(swing_low, style=shape.arrowup, location=location.belowbar, color=color.new(color.green, 0), text='SL', offset=-barsback)
plotshape(showsig ? swing_high : na, style=shape.arrowdown, location=location.abovebar, color=color.new(color.blue, 0), text='Sig')
plotshape(showsig ? swing_low : na, style=shape.arrowup, location=location.belowbar, color=color.new(color.blue, 0), text='Sig')

// Plot buy and sell signals on the chart
plotshape(series=buySignal, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY")
plotshape(series=sellSignal, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL")

// Plot RSI for reference in a separate pane
plot(rsi, title="RSI", color=color.blue)

// Define the level at which you want to draw the line
breakoutLevel = input(100, "Breakout Level")

// Check if the open price breaks above or below the specified level
openAboveLevel = ta.crossover(open, breakoutLevel)
openBelowLevel = ta.crossunder(open, breakoutLevel)

// Plot the line if the open price breaks above or below the level
plotshape(openAboveLevel, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small, offset = -1)
plotshape(openBelowLevel, style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small, offset = -1)
